//
//  base template generated by OpenBytes on 12/21/22.
//  Copyright (c) 2023 OpenBytes
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the conditions found at the following link:
//  https://github.com/0xOpenBytes/ios-BASE/blob/main/LICENSE
//
// Created by Leif.
//  ImageView.swift
//

import Network
import SwiftUI

class ImageViewModel: ObservableObject {
    @Published var image: Image?

    func loadImage(for url: URL?) async {
        guard let url = url else {
            print("URL was nil")
            return
        }

        let loadedImage = await load(url: url)

        await MainActor.run {
            self.image = loadedImage
        }
    }

    private func load(url: URL) async -> Image? {
        if let cachedImage = ImageCache.shared.get(url) {
            return cachedImage
        }

        do {
            guard
                let data = try await Network.get(url: url).data,
                let imageData = UIImage(data: data)
            else { return nil }

            let loadedImage = Image(uiImage: imageData)

            ImageCache.shared.set(image: loadedImage, forKey: url)

            return loadedImage
        } catch {
            print(error.localizedDescription)
            return nil
        }
    }
}

struct ImageView<Content: View, Placeholder: View>: View {
    @ObservedObject private var viewModel = ImageViewModel()

    let url: URL?
    let content: (Image) -> Content
    let placeholder: () -> Placeholder

    var body: some View {
        if let image = viewModel.image {
            content(image)
        } else {
            placeholder()
                .task {
                    await viewModel.loadImage(for: url)
                }
        }
    }
}
