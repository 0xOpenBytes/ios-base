//
//  base template generated by OpenBytes on 12/21/22.
//  Copyright (c) 2023 OpenBytes
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the conditions found at the following link:
//  https://github.com/0xOpenBytes/ios-BASE/blob/main/LICENSE
//
// Created by Rob Maltese.
//  RegisterNetworking.swift
//

import t

protocol RegisterNetworking {
   mutating func register(
    username: String,
    email: String,
    password: String,
    passwordConfirmation: String
   ) async throws -> User
}

struct ProductionRegisterService: RegisterNetworking, AuthNetworking {
    mutating func register(
        username: String,
        email: String,
        password: String,
        passwordConfirmation: String
    ) async throws -> User {
        // Register user
        let response = try await register(
            name: username,
            email: email,
            password: password,
            confirmationPassword: passwordConfirmation
        )

        // Return Device User from NetworkUser object
        return try UserAdapter.device(from: response.user)
    }
}

// Success Register
struct SuccessMockRegisterService: RegisterNetworking {
    func register(
        username: String,
        email: String,
        password: String,
        passwordConfirmation: String
    ) async throws -> User {
        return User(username: username, email: email, color: .green)
    }
}

// No Data Failure Register
struct NoDataFailureMockRegisterService: RegisterNetworking {
    func register(
        username: String,
        email: String,
        password: String,
        passwordConfirmation: String
    ) async throws -> User {
        throw t.error(description: "No Data")
    }
}

// Validation Failure Register
struct ValidationFailureMockRegisterService: RegisterNetworking {
    func register(
        username: String,
        email: String,
        password: String,
        passwordConfirmation: String
    ) async throws -> User {
        throw t.error(description: "Validation")
    }
}
